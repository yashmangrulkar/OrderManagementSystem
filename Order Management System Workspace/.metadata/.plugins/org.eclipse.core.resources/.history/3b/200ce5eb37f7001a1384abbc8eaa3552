package com.oms.order.orderservice.service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.oms.order.orderservice.model.Cart;
import com.oms.order.orderservice.model.Order;
import com.oms.order.orderservice.model.OrderProduct;
import com.oms.order.orderservice.model.Products;
import com.oms.order.orderservice.repository.OrderRepository;

import javassist.bytecode.stackmap.BasicBlock.Catch;

@Service
public class OrderServiceImpl implements OrderService {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(OrderServiceImpl.class);
	
	@Autowired
	OrderRepository orderRepository;

	@Override
	public List<Products> getAllProducts(int cartId) {
		Map<String, Integer> uriVariables = new HashMap<>();
		uriVariables.put("cartId", cartId);

		ResponseEntity<Cart> responseEntity = new RestTemplate()
				.getForEntity("http://localhost:8084/fetchCart/{cartId}", Cart.class, uriVariables);
		Cart cart = responseEntity.getBody();
		return cart.getProducts();

	}

	@Override
	public void placedOrder(int cartId, int productId,int orderId) {
		try {
		List<OrderProduct> orderProductList = new ArrayList<>();
		List<Products> productList = getAllProducts(cartId);
		if (productList != null) {
			Order order = new Order();
			order.setDate(LocalDate.now());
			order.setOrderId(orderId);
			
			for(Products product :productList) {
				if(product.getProductID()==productId) {
		    OrderProduct orderProduct = new OrderProduct();
		    orderProduct.setOrderStatus("Ordered");
		    orderProduct.setProductID(product.getProductID());
		    orderProduct.setProductName(product.getProductName());
		    orderProductList.add(orderProduct);
				}	
			}
			order.setOrderProductList(orderProductList);
			orderRepository.save(order);
			Cart cart = removeAfterPlacingOrder(productId,cartId);
			
		}

	}
		catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("error while placing Order: "+e.getMessage());
		}
	}
	
	public Cart removeAfterPlacingOrder(int productId, int cardId) {
		Map<String, Integer> uriVariables = new HashMap<>();
		uriVariables.put("cartId", cardId);
		uriVariables.put("cartId", productId);

		ResponseEntity<Cart> responseEntity = new RestTemplate()
				.getForEntity("http://localhost:8084/removefromcart/{cartId}/{productID}", Cart.class, uriVariables);
		Cart cart = responseEntity.getBody();
		return cart;
	}
}
